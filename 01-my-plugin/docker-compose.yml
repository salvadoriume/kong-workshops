version: '3.9'

x-kong-config-env: &kong-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: kong
  KONG_PG_HOST: db
  KONG_PG_USER: kong
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
  KONG_PLUGINS: bundled,01-my-plugin
  KONG_LOG_LEVEL: debug
  KONG_LUA_PACKAGE_PATH: /usr/local/custom/?.lua;;

x-kong-config-vol: 
  - &kong-vol
    type: bind
    source: "./plugins/01-my-plugin"
    target: "/usr/local/share/lua/5.1/kong/plugins/01-my-plugin"

services:
  konga:
    image: pantsel/konga:latest
    container_name: my-konga
    profiles: ["kong"]
    ports:
      - 1337:1337
    networks:
      - kong-net
    volumes:
      - type: bind
        source: "./konga"
        target: "/konga/config"
    environment:
      KONGA_SEED_USER_DATA_SOURCE_FILE: /konga/config/user_seed.js
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /konga/config/node_seed.js
      NODE_ENV: production
    restart: on-failure

  kong-migrations:
    image: kong:latest
    container_name: my-kong-migration
    command: kong migrations bootstrap
    profiles: ["database"]
    depends_on:
      - db
    volumes:
      - *kong-vol
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong-migrations-up:
    image: kong:latest
    container_name: my-kong-migration-up
    command: kong migrations up && kong migrations finish
    profiles: ["database"]
    depends_on:
      - db
    volumes:
      - *kong-vol
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure

  kong:
    platform: linux/arm64
    image: kong:latest
    container_name: my-kong
    profiles: ["kong"]
    user: kong
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: /var/run/kong
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      - "0.0.0.0:8000:8000/tcp"
      - "127.0.0.1:8001:8001/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:/var/run/kong
      - kong_tmp_vol:/tmp
      - ./config:/opt/kong
      - *kong-vol
    security_opt:
      - no-new-privileges

  db:
    image: postgres:9.5
    container_name: my-postgres
    profiles: ["database"]
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    ports:
      - 5432:5432
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

  echoserver:
    image: ealen/echo-server:latest
    container_name: my-echoserver
    profiles: ["kong"]
    logging:
      driver: none
    environment:
      - ENABLE_ENVIRONMENT=false
    networks:
      - kong-net
    depends_on:
      kong:
        condition: service_healthy

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  kong_tmp_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs

networks:
  kong-net:
    external: false


